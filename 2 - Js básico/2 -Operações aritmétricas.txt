Uma das maneiras mais comuns de formar expressões em JavaScript é usar operadores, como segue:

// Os operadores atuam sobre os valores (operandos) para produzir um novo valor.
// Os operadores aritméticos são os mais comuns:
	3 + 2 				// => 5: adição
	3 – 2 				// => 1: subtração
	3 * 2 				// => 6: multiplicação
	3 / 2 				// => 1.5: divisão
	points[1].x – points[0].x 	// => 1: operandos mais complicados também funcionam
	"3" + "2" 			// => "32": + soma números, ou concatena strings

// JavaScript define alguns operadores aritméticos de forma abreviada
	var count = 0; 			// => 0: Define uma variável
	count++; 			// => count = (count+1); Incrementa a variável
	count--; 			// => count = (count-1); Decrementa a variável
	count += 2; 			// Soma 2: o mesmo que count = count + 2;
	count *= 3; 			// Multiplica por 3: o mesmo que count = count * 3;
	count 				// => 6: nomes de variáveis também são expressões.

// Os operadores de igualdade e relacionais testam se dois valores são iguais,
// desiguais, menores que, maiores que, etc. São avaliados como verdadeiros ou falsos.
	var x = 2, y = 3; 		// Esses sinais = são atribuições e não testes de igualdade.
	
	x == y 				// => falso: igualdade
	x != y 				// => verdadeiro: desigualdade
	x < y 				// => verdadeiro: menor que
	x <= y 				// => verdadeiro: menor ou igual a
	x > y 				// => falso: maior que
	x >= y 				// => falso: maior ou igual a
	"two" == "three" 		// => falso: as duas strings são diferentes
	"two" > "three" 		// => verdadeiro: "tw" é alfabeticamente maior do que "th"
	false == (x > y) 		// => verdadeiro: falso é igual a falso

// Os operadores lógicos combinam ou invertem valores booleanos
	(x == 2) && (y == 3) 		// => verdadeiro: as duas comparações são verdadeiras. && é E
	(x > 3) || (y < 3) 		// => falso: nenhuma das comparações é verdadeira. || é OU
	!(x == y) 			// => verdadeiro: ! inverte um valor booleano